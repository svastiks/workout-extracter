"use client"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Clock, Users, Target, ArrowLeft, Download, Share2, Copy, Check, ChevronDown, ChevronUp } from "lucide-react"
import Link from "next/link"
import Image from "next/image"
import { useState, useEffect } from "react"
import { useToast } from "@/hooks/use-toast"
import { getWorkoutByYoutubeId, Workout } from "@/services/api"
import { useParams } from "next/navigation"

const getDifficultyColor = (difficulty: string) => {
  switch (difficulty?.toLowerCase()) {
    case "easy":
      return "bg-green-500/20 text-green-300 border-green-500/30"
    case "medium":
      return "bg-yellow-500/20 text-yellow-300 border-yellow-500/30"
    case "hard":
      return "bg-red-500/20 text-red-300 border-red-500/30"
    default:
      return "bg-gray-500/20 text-gray-300 border-gray-500/30"
  }
}

export default function WorkoutExtractPage() {
  const params = useParams();
  const videoId = params?.videoId as string;
  const [workoutData, setWorkoutData] = useState<Workout | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [copiedExercise, setCopiedExercise] = useState<number | null>(null)
  const [copiedFull, setCopiedFull] = useState(false)
  const [expandedExercises, setExpandedExercises] = useState<Set<number>>(new Set())
  const { toast } = useToast()

  useEffect(() => {
    if (!videoId) return;
    setLoading(true);
    getWorkoutByYoutubeId(videoId)
      .then(data => {
        if (typeof data.workoutData === "string") {
          data.workoutData = JSON.parse(data.workoutData);
        }
        setWorkoutData(data);
        setLoading(false);
      })
      .catch(() => {
        setError("Workout not found");
        setLoading(false);
      });
  }, [videoId]);

  const toggleExercise = (index: number) => {
    const newExpanded = new Set(expandedExercises)
    if (newExpanded.has(index)) {
      newExpanded.delete(index)
    } else {
      newExpanded.add(index)
    }
    setExpandedExercises(newExpanded)
  }

  const copyExercise = async (exercise: any, index: number) => {
    const exerciseText = `${exercise.emoji || ''} ${exercise.name}\nSets: ${exercise.sets} | Reps: ${exercise.reps} | Rest: ${exercise.rest}\nNotes: ${exercise.notes}`
    try {
      await navigator.clipboard.writeText(exerciseText)
      setCopiedExercise(index)
      toast({ title: "Exercise copied! üìã", description: "Exercise details copied to clipboard" })
      setTimeout(() => setCopiedExercise(null), 2000)
    } catch (err) {
      toast({ title: "Failed to copy", description: "Please try again", variant: "destructive" })
    }
  }

  const copyFullWorkout = async () => {
    if (!workoutData) return;
    const workoutText = `üèãÔ∏è ${workoutData.title}\nüë®‚Äçüè´ Created by: ${workoutData.creator.name}\n‚è±Ô∏è Duration: ${workoutData.thumbnailUrl}\nüéØ Type: ${workoutData.workoutData?.workoutType || ''}\nüí™ Target: ${(workoutData.workoutData?.targetMuscles || []).join(", ")}\nüõ†Ô∏è Equipment: ${(workoutData.workoutData?.equipment || []).join(", ")}\n\nEXERCISES:\n${(workoutData.workoutData?.exercises || []).map((exercise: any, index: number) => `${index + 1}. ${exercise.emoji || ''} ${exercise.name}\n   Sets: ${exercise.sets} | Reps: ${exercise.reps} | Rest: ${exercise.rest}\n   Notes: ${exercise.notes}`).join("\n\n")}\n\nGenerated by WorkoutExtract üöÄ`
    try {
      await navigator.clipboard.writeText(workoutText)
      setCopiedFull(true)
      toast({ title: "Full workout copied! üéâ", description: "Complete workout routine copied to clipboard" })
      setTimeout(() => setCopiedFull(false), 3000)
    } catch (err) {
      toast({ title: "Failed to copy", description: "Please try again", variant: "destructive" })
    }
  }

  if (loading) return <div className="text-center text-white py-20">Loading workout...</div>;
  if (error) return <div className="text-center text-red-500 py-20">{error}</div>;
  if (!workoutData) return null;

  return (
    <div className="bg-black min-h-screen">
      {/* Header */}
      <header className="bg-black border-b border-gray-800 sticky top-0 z-50 backdrop-blur-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href="/catalog" className="flex items-center gap-2">
              <ArrowLeft className="w-5 h-5 text-gray-400" />
              <span className="text-gray-400 hover:text-white transition-colors">Back to Catalog</span>
            </Link>
            <div className="flex items-center gap-3">
              <Button
                variant="outline"
                size="sm"
                className="border-gray-600 text-gray-300 hover:bg-white hover:text-black bg-transparent"
                onClick={copyFullWorkout}
              >
                {copiedFull ? <Check className="w-4 h-4 mr-2" /> : <Copy className="w-4 h-4 mr-2" />}
                {copiedFull ? "Copied!" : "Copy Workout"}
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="border-gray-600 text-gray-300 hover:bg-white hover:text-black bg-transparent"
              >
                <Share2 className="w-4 h-4 mr-2" />
                Share
              </Button>
              <Button size="sm" className="bg-white hover:bg-gray-200 text-black">
                <Download className="w-4 h-4 mr-2" />
                Export PDF
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        {/* Video Info */}
        <Card className="bg-gray-900 border-gray-800 mb-8">
          <CardHeader>
            <div className="flex items-start gap-4">
              <Image
                src="/placeholder.svg?height=80&width=80"
                alt={workoutData.creator.name}
                width={60}
                height={60}
                className="rounded-full"
              />
              <div className="flex-1">
                <CardTitle className="text-2xl text-white mb-2 flex items-center gap-2">
                  üèãÔ∏è {workoutData.title}
                </CardTitle>
                <CardDescription className="text-gray-300 text-lg mb-4">
                  üë®‚Äçüè´ Created by {workoutData.creator.name}
                </CardDescription>
                <div className="flex flex-wrap gap-3">
                  <Badge className="bg-gray-800 text-gray-300 border-gray-700">
                    <Clock className="w-3 h-3 mr-1" />
                    ‚è±Ô∏è {workoutData.duration}
                  </Badge>
                  <Badge className="bg-blue-500/20 text-blue-300 border-blue-500/30">
                    <Target className="w-3 h-3 mr-1" />üéØ {workoutData.difficulty}
                  </Badge>
                  <Badge className="bg-green-500/20 text-green-300 border-green-500/30">
                    <Users className="w-3 h-3 mr-1" />üí™ {workoutData.workoutData?.workoutType || ''}
                  </Badge>
                </div>
              </div>
            </div>
          </CardHeader>
        </Card>

        <div className="grid lg:grid-cols-3 gap-8">
          {/* Workout Details */}
          <div className="lg:col-span-2">
            <Card className="bg-gray-900 border-gray-800">
              <CardHeader>
                <CardTitle className="text-xl text-white flex items-center gap-2">üìã Workout Routine</CardTitle>
                <CardDescription className="text-gray-300">
                  Click on exercises to expand details ‚Ä¢ Copy individual exercises or the full workout
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {workoutData.workoutData?.exercises?.map((exercise, index) => (
                  <Card key={index} className="bg-gray-800 border-gray-700 hover:bg-gray-750 transition-all">
                    <CardContent className="p-4">
                      <div
                        className="flex items-center justify-between cursor-pointer"
                        onClick={() => toggleExercise(index)}
                      >
                        <div className="flex items-center gap-3">
                          <span className="text-2xl">{exercise.emoji}</span>
                          <div>
                            <h3 className="text-lg font-semibold text-white">
                              {index + 1}. {exercise.name}
                            </h3>
                            <div className="flex items-center gap-2 mt-1">
                              <Badge className={getDifficultyColor(exercise.difficulty)}>{exercise.difficulty}</Badge>
                            </div>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <Button
                            variant="ghost"
                            size="sm"
                            className="text-gray-400 hover:text-white"
                            onClick={(e) => {
                              e.stopPropagation()
                              copyExercise(exercise, index)
                            }}
                          >
                            {copiedExercise === index ? <Check className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
                          </Button>
                          {expandedExercises.has(index) ? (
                            <ChevronUp className="w-5 h-5 text-gray-400" />
                          ) : (
                            <ChevronDown className="w-5 h-5 text-gray-400" />
                          )}
                        </div>
                      </div>

                      {expandedExercises.has(index) && (
                        <div className="mt-4 pt-4 border-t border-gray-600">
                          <div className="grid grid-cols-3 gap-4 mb-4">
                            <div className="bg-gray-700 rounded-lg p-3 text-center">
                              <div className="text-white font-semibold text-lg">{exercise.sets}</div>
                              <div className="text-gray-400 text-sm">Sets</div>
                            </div>
                            <div className="bg-gray-700 rounded-lg p-3 text-center">
                              <div className="text-white font-semibold text-lg">{exercise.reps}</div>
                              <div className="text-gray-400 text-sm">Reps</div>
                            </div>
                            <div className="bg-gray-700 rounded-lg p-3 text-center">
                              <div className="text-white font-semibold text-lg">{exercise.rest}</div>
                              <div className="text-gray-400 text-sm">Rest</div>
                            </div>
                          </div>
                          <div className="bg-gray-700 rounded-lg p-3">
                            <h4 className="text-white font-medium mb-2 flex items-center gap-2">üí° Exercise Notes</h4>
                            <p className="text-gray-300 text-sm">{exercise.notes}</p>
                          </div>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                ))}
              </CardContent>
            </Card>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Quick Actions */}
            <Card className="bg-gray-900 border-gray-800">
              <CardHeader>
                <CardTitle className="text-lg text-white flex items-center gap-2">‚ö° Quick Actions</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <Button className="w-full bg-white hover:bg-gray-200 text-black" onClick={copyFullWorkout}>
                  {copiedFull ? <Check className="w-4 h-4 mr-2" /> : <Copy className="w-4 h-4 mr-2" />}
                  {copiedFull ? "Copied! üéâ" : "Copy Full Workout üìã"}
                </Button>
                <Button
                  variant="outline"
                  className="w-full border-gray-600 text-gray-300 hover:bg-white hover:text-black bg-transparent"
                >
                  <Download className="w-4 h-4 mr-2" />
                  Export as PDF üìÑ
                </Button>
                <Button
                  variant="outline"
                  className="w-full border-gray-600 text-gray-300 hover:bg-white hover:text-black bg-transparent"
                >
                  <Share2 className="w-4 h-4 mr-2" />
                  Share Workout üîó
                </Button>
              </CardContent>
            </Card>

            {/* Target Muscles */}
            <Card className="bg-gray-900 border-gray-800">
              <CardHeader>
                <CardTitle className="text-lg text-white flex items-center gap-2">üéØ Target Muscles</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex flex-wrap gap-2">
                  {(workoutData.workoutData?.targetMuscles || []).map((muscle, index) => (
                    <Badge key={index} variant="secondary" className="bg-gray-800 text-gray-300 border-gray-700">
                      üí™ {muscle}
                    </Badge>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Equipment */}
            <Card className="bg-gray-900 border-gray-800">
              <CardHeader>
                <CardTitle className="text-lg text-white flex items-center gap-2">üõ†Ô∏è Equipment Needed</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  {(workoutData.workoutData?.equipment || []).map((item, index) => (
                    <div key={index} className="flex items-center gap-2 text-gray-300">
                      <div className="w-2 h-2 bg-white rounded-full"></div>
                      {item}
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Workout Summary */}
            <Card className="bg-gray-900 border-gray-800">
              <CardHeader>
                <CardTitle className="text-lg text-white flex items-center gap-2">üìä Workout Summary</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-gray-400">üèãÔ∏è Total Exercises</span>
                  <span className="text-white font-semibold">{(workoutData.workoutData?.exercises || []).length}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">‚è±Ô∏è Estimated Time</span>
                  <span className="text-white font-semibold">{workoutData.totalTime}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">üéØ Difficulty</span>
                  <span className="text-white font-semibold">{workoutData.difficulty}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">üí™ Workout Type</span>
                  <span className="text-white font-semibold">{workoutData.workoutData?.workoutType || ''}</span>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}
