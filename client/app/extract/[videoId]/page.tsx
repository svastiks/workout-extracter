"use client"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { Clock, Users, Target, ArrowLeft, Download, Share2, Copy, Check, ChevronDown, ChevronUp, AlertCircle } from "lucide-react"
import Link from "next/link"
import Image from "next/image"
import { useState, useEffect } from "react"
import { useToast } from "@/hooks/use-toast"
import { getWorkoutByYoutubeId, exportWorkoutPDF, Workout } from "@/services/api"
import { useParams } from "next/navigation"

const getDifficultyColor = (difficulty: string) => {
  switch (difficulty?.toLowerCase()) {
    case "easy":
      return "bg-green-500/20 text-green-300 border-green-500/30"
    case "medium":
      return "bg-yellow-500/20 text-yellow-300 border-yellow-500/30"
    case "hard":
      return "bg-red-500/20 text-red-300 border-red-500/30"
    default:
      return "bg-gray-500/20 text-gray-300 border-gray-500/30"
  }
}

export default function WorkoutExtractPage() {
  const params = useParams();
  const videoId = params?.videoId as string;
  const [workoutData, setWorkoutData] = useState<Workout | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [copiedExercise, setCopiedExercise] = useState<number | null>(null)
  const [copiedFull, setCopiedFull] = useState(false)
  const [expandedExercises, setExpandedExercises] = useState<Set<number>>(new Set([0]))
  const [showLlmAdjustedModal, setShowLlmAdjustedModal] = useState(false);
  const { toast } = useToast()

  useEffect(() => {
    if (!videoId) return;
    setLoading(true);
    getWorkoutByYoutubeId(videoId)
      .then(data => {
        if (typeof data.workoutData === "string") {
          data.workoutData = JSON.parse(data.workoutData);
        }
        setWorkoutData(data);
        setLoading(false);
        
        // Show LLM adjusted modal if workout was adjusted
        if (data.workoutData?.llmAdjusted) {
          setShowLlmAdjustedModal(true);
        }
      })
      .catch(() => {
        setError("Workout not found");
        setLoading(false);
      });
  }, [videoId]);

  // Additional useEffect to handle modal display after workoutData is set
  useEffect(() => {
    if (workoutData?.workoutData?.llmAdjusted) {
      setShowLlmAdjustedModal(true);
    }
  }, [workoutData]);

  const toggleExercise = (index: number) => {
    const newExpanded = new Set(expandedExercises)
    if (newExpanded.has(index)) {
      newExpanded.delete(index)
    } else {
      newExpanded.add(index)
    }
    setExpandedExercises(newExpanded)
  }

  const copyExercise = async (exercise: any, index: number) => {
    const exerciseText = `${exercise.emoji || ''} ${exercise.name}\nSets: ${exercise.sets} | Reps: ${exercise.reps} | Rest: ${exercise.rest}\nNotes: ${exercise.notes}`
    try {
      await navigator.clipboard.writeText(exerciseText)
      setCopiedExercise(index)
      toast({ title: "Exercise copied! 📋", description: "Exercise details copied to clipboard" })
      setTimeout(() => setCopiedExercise(null), 2000)
    } catch (err) {
      toast({ title: "Failed to copy", description: "Please try again", variant: "destructive" })
    }
  }

  const copyFullWorkout = async () => {
    if (!workoutData) return;
    const workoutText = `🏋️ ${workoutData.title}\n👨‍🏫 Created by: ${workoutData.creator.name}\n⏱️ Duration: ${workoutData.thumbnailUrl}\n🎯 Type: ${workoutData.workoutData?.workoutType || ''}\n💪 Target: ${(workoutData.workoutData?.targetMuscles || []).join(", ")}\n🛠️ Equipment: ${(workoutData.workoutData?.equipment || []).join(", ")}\n\nEXERCISES:\n${(workoutData.workoutData?.exercises || []).map((exercise: any, index: number) => `${index + 1}. ${exercise.emoji || ''} ${exercise.name}\n   Sets: ${exercise.sets} | Reps: ${exercise.reps} | Rest: ${exercise.rest}\n   Notes: ${exercise.notes}`).join("\n\n")}\n\nGenerated by WorkoutExtract 🚀`
    try {
      await navigator.clipboard.writeText(workoutText)
      setCopiedFull(true)
      toast({ title: "Full workout copied! 🎉", description: "Complete workout routine copied to clipboard" })
      setTimeout(() => setCopiedFull(false), 3000)
    } catch (err) {
      toast({ title: "Failed to copy", description: "Please try again", variant: "destructive" })
    }
  }

  const handleExportPDF = async () => {
    if (!workoutData) return;
    try {
      const blob = await exportWorkoutPDF(workoutData.youtubeVideoId);
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `workout-${workoutData.youtubeVideoId}.pdf`;
      a.click();
      window.URL.revokeObjectURL(url);
      toast({ title: "PDF exported! 📄", description: "Workout PDF downloaded successfully" });
    } catch (error) {
      console.error('Failed to export PDF:', error);
      toast({ title: "Failed to export PDF", description: "Please try again", variant: "destructive" });
    }
  }



  if (loading) return <div className="text-center text-white py-20">Loading workout...</div>;
  if (error) return <div className="text-center text-red-500 py-20">{error}</div>;
  if (!workoutData) return null;

  const isLlmAdjusted = workoutData.workoutData?.llmAdjusted;

  return (
    <div className="bg-black min-h-screen">
      {/* Header */}
      <header className="bg-black border-b border-gray-800 sticky top-0 z-50 backdrop-blur-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href={`/catalog/${workoutData.creator.id}`} className="flex items-center gap-2">
              <ArrowLeft className="w-5 h-5 text-gray-400" />
              <span className="text-gray-400 hover:text-white transition-colors">Back to {workoutData.creator.name}</span>
            </Link>
            <div className="flex items-center gap-3">
              <Button
                variant="outline"
                className="border-gray-600 text-white hover:bg-white hover:text-black bg-transparent px-4 py-2 h-10 font-medium"
                onClick={copyFullWorkout}
              >
                {copiedFull ? <Check className="w-5 h-5 mr-2" /> : <Copy className="w-5 h-5 mr-2" />}
                {copiedFull ? "Copied!" : "Copy Workout"}
              </Button>
              <Button
                variant="outline"
                className="border-gray-600 text-white hover:bg-white hover:text-black bg-transparent px-4 py-2 h-10 font-medium"
              >
                <Share2 className="w-5 h-5 mr-2" />
                Share
              </Button>

            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        {/* Workout Header */}
        <div className="mb-8">
          <Card className="bg-gray-900 border-gray-800 p-6">
            <div className="flex items-start gap-6">
              <div className="relative flex-shrink-0">
                <Image
                  src={workoutData.creator.profileImageUrl || "/placeholder.svg"}
                  alt={workoutData.creator.name}
                  width={80}
                  height={80}
                  className="rounded-full w-20 h-20 object-cover"
                />
              </div>
              <div className="flex-1">
                <h1 className="text-3xl font-bold text-white mb-2">
                  {workoutData.title}
                  {workoutData.workoutData?.llmAdjusted && (
                    <span className="ml-3 text-sm bg-yellow-500/20 text-yellow-300 border border-yellow-500/30 px-3 py-1 rounded-full">
                      LLM Adjusted Workout (missing data)
                    </span>
                  )}
                </h1>
                <p className="text-gray-300 text-lg mb-4">Created by {workoutData.creator.name}</p>
                <div className="flex flex-wrap gap-3">
                  <Badge className="bg-gray-800 text-gray-300 border-gray-700 px-3 py-1">
                    <Clock className="w-3 h-3 mr-1" />
                    {workoutData.duration || "12 minutes"}
                  </Badge>
                  <Badge className="bg-yellow-500/20 text-yellow-300 border-yellow-500/30 px-3 py-1">
                    <Target className="w-3 h-3 mr-1" />
                    {workoutData.difficulty || "Intermediate"}
                  </Badge>
                  <Badge className="bg-blue-500/20 text-blue-300 border-blue-500/30 px-3 py-1">
                    <Users className="w-3 h-3 mr-1" />
                    {workoutData.workoutData?.workoutType || "Push Day"}
                  </Badge>
                </div>
              </div>
            </div>
          </Card>
        </div>

        <div className="grid lg:grid-cols-3 gap-8">
          {/* Workout Routine */}
          <div className="lg:col-span-2">
            <Card className="bg-gray-900 border-gray-800">
              <CardHeader className="pb-6">
                <CardTitle className="text-2xl text-white flex items-center gap-3 font-bold">
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                  </svg>
                  Workout Routine
                </CardTitle>
                <CardDescription className="text-gray-300 text-base">
                  Click on exercises to expand details • Copy individual exercises or the full workout
                </CardDescription>
              </CardHeader>
              <CardContent className="pt-0 space-y-4">
                {workoutData.workoutData?.exercises && workoutData.workoutData.exercises.length > 0 ? (
                  workoutData.workoutData.exercises.map((exercise, index) => (
                    <Card key={index} className="bg-gray-800 border-gray-700">
                      <CardContent className="p-4">
                        <div
                          className="flex items-center justify-between cursor-pointer"
                          onClick={() => toggleExercise(index)}
                        >
                          <div className="flex items-center gap-3">
                            <span className="text-2xl">{exercise.emoji || "🏋️"}</span>
                            <div>
                              <h3 className="text-white font-semibold text-lg">
                                {index + 1}. {exercise.name}
                              </h3>
                              <Badge className={`${getDifficultyColor(exercise.difficulty || "Medium")} mt-1 px-3 py-1 text-xs`}>
                                {exercise.difficulty || "Medium"}
                              </Badge>
                            </div>
                          </div>
                          <div className="flex items-center gap-2">
                            <Button
                              variant="ghost"
                              size="sm"
                              className="text-gray-400 hover:text-white p-1 h-auto"
                              onClick={(e) => {
                                e.stopPropagation();
                                copyExercise(exercise, index);
                              }}
                            >
                              <Copy className="w-4 h-4" />
                            </Button>
                            {expandedExercises.has(index) ? (
                              <ChevronUp className="w-5 h-5 text-gray-400" />
                            ) : (
                              <ChevronDown className="w-5 h-5 text-gray-400" />
                            )}
                          </div>
                        </div>

                        {expandedExercises.has(index) && (
                          <div className="mt-4 pt-4 border-t border-gray-600">
                            <div className="grid grid-cols-3 gap-4 mb-4">
                              <div className="bg-gray-700 rounded-lg p-4 text-center">
                                <div className="text-white font-semibold text-xl">{exercise.sets || "N/A"}</div>
                                <div className="text-gray-400 text-sm">Sets</div>
                              </div>
                              <div className="bg-gray-700 rounded-lg p-4 text-center">
                                <div className="text-white font-semibold text-xl">{exercise.reps || "N/A"}</div>
                                <div className="text-gray-400 text-sm">Reps</div>
                              </div>
                              <div className="bg-gray-700 rounded-lg p-4 text-center">
                                <div className="text-white font-semibold text-xl">{exercise.rest || "N/A"}</div>
                                <div className="text-gray-400 text-sm">Rest</div>
                              </div>
                            </div>
                            {exercise.notes && (
                              <div className="bg-gray-700 rounded-lg p-4">
                                <h4 className="text-white font-medium mb-2 flex items-center gap-2">💡 Exercise Notes</h4>
                                <p className="text-gray-300 text-sm">{exercise.notes}</p>
                              </div>
                            )}
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  ))
                ) : (
                  <div className="text-center py-12">
                    {(workoutData.workoutData as any)?.extractionFailed ? (
                      <div>
                        <div className="text-red-400 text-lg mb-4">⚠️ Video Analysis Failed</div>
                        <p className="text-gray-500 text-sm">
                          {(workoutData.workoutData as any)?.failureReason || "The video transcript was corrupted or unavailable, and AI analysis could not extract workout data from the video content."}
                        </p>
                        <p className="text-gray-400 text-xs mt-4">
                          This could be due to:
                        </p>
                        <ul className="text-gray-500 text-xs mt-2 space-y-1">
                          <li>• No transcript available for this video</li>
                          <li>• Corrupted or unreadable transcript data</li>
                          <li>• Video content not suitable for workout extraction</li>
                        </ul>
                      </div>
                    ) : (
                      <div>
                        <div className="text-gray-400 text-lg mb-4">No exercises found</div>
                        <p className="text-gray-500 text-sm">
                          The workout extraction couldn't find any exercises in this video.
                          {workoutData.workoutData?.llmAdjusted && (
                            <span className="block mt-2 text-yellow-400">
                              This workout was adjusted by AI due to corrupted transcript data.
                            </span>
                          )}
                        </p>
                      </div>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Quick Actions */}
            <Card className="bg-gray-900 border-gray-800">
              <CardHeader>
                <CardTitle className="text-lg text-white flex items-center gap-2">
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                  </svg>
                  Quick Actions
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <Button className="w-full bg-white hover:bg-gray-200 text-black font-medium" onClick={copyFullWorkout}>
                  {copiedFull ? <Check className="w-4 h-4 mr-2" /> : <Copy className="w-4 h-4 mr-2" />}
                  {copiedFull ? "Copied!" : "Copy Full Workout"}
                </Button>
                <Button
                  variant="outline"
                  className="w-full border-gray-600 text-gray-300 hover:bg-white hover:text-black bg-transparent"
                  onClick={handleExportPDF}
                >
                  <Download className="w-4 h-4 mr-2" />
                  Export as PDF
                </Button>
                <Button
                  variant="outline"
                  className="w-full border-gray-600 text-gray-300 hover:bg-white hover:text-black bg-transparent"
                >
                  <Share2 className="w-4 h-4 mr-2" />
                  Share Workout
                </Button>
              </CardContent>
            </Card>

            {/* Target Muscles */}
            <Card className="bg-gray-900 border-gray-800">
              <CardHeader>
                <CardTitle className="text-lg text-white flex items-center gap-2">
                  <span>🎯</span>
                  Target Muscles
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex flex-wrap gap-3">
                  {workoutData.workoutData?.targetMuscles && workoutData.workoutData.targetMuscles.length > 0 ? (
                    workoutData.workoutData.targetMuscles.map((muscle, index) => (
                      <Badge key={index} variant="secondary" className="bg-gray-800 text-gray-300 border-gray-700 px-4 py-2 text-base">
                        💪 {muscle}
                      </Badge>
                    ))
                  ) : (
                    <div className="text-gray-400 text-base italic">
                      No target muscles specified
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* Equipment */}
            <Card className="bg-gray-900 border-gray-800">
              <CardHeader>
                <CardTitle className="text-lg text-white flex items-center gap-2">
                  <span>🛠️</span>
                  Equipment Needed
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {(() => {
                    const equipment = workoutData.workoutData?.equipment;
                    
                    if (!equipment || equipment.length === 0) {
                      return (
                        <div className="text-gray-400 text-base italic">
                          N/A
                        </div>
                      );
                    }
                    
                    return equipment.map((item, index) => (
                      <div key={index} className="flex items-center gap-3 text-gray-300 text-base">
                        <div className="w-2 h-2 bg-gray-400 rounded-full"></div>
                        {item.charAt(0).toUpperCase() + item.slice(1)}
                      </div>
                    ));
                  })()}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

      {/* LLM Adjusted Modal */}
      {showLlmAdjustedModal && (
        <div className="fixed inset-0 bg-black/80 flex items-center justify-center z-50 p-4">
          <div className="bg-gray-900 border border-gray-800 rounded-lg p-6 max-w-md w-full">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-10 h-10 bg-yellow-500/20 rounded-full flex items-center justify-center">
                <AlertCircle className="w-5 h-5 text-yellow-300" />
              </div>
              <div>
                <h3 className="text-lg font-semibold text-white">LLM Adjusted Workout</h3>
                <p className="text-gray-400 text-sm">Due to corrupted transcript data</p>
              </div>
            </div>
            <p className="text-gray-300 mb-6">
              {(workoutData.workoutData as any)?.extractionFailed ? 
                "The video transcript was corrupted or unavailable, and our AI could not analyze the video content to extract workout data. The system attempted multiple analysis methods but was unable to generate a reliable workout from this video." :
                "The video transcript was corrupted or unavailable, so our AI has created an adjusted workout based on the video metadata. The exercises shown are educated guesses based on the video title and creator's typical content."
              }
            </p>
            <div className="flex gap-3">
              <Button 
                onClick={() => setShowLlmAdjustedModal(false)}
                className="flex-1 bg-white hover:bg-gray-200 text-black"
              >
                Got it
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
